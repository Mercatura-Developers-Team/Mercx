type Account = record { owner : principal; subaccount : opt blob };
type AddPoolArgs = record {
  token_0 : text;
  token_1 : text;
  amount_0 : nat;
  amount_1 : nat;
  tx_id_0 : opt TxId;
  tx_id_1 : opt TxId;
  lp_fee_bps : opt nat8;
};
type AddPoolReply = record {
  ts : nat64;
  lp_token_amount : nat;
  lp_token_symbol : text;
  name : text;
  amount_0 : nat;
  amount_1 : nat;
  address_0 : text;
  address_1 : text;
  symbol_0 : text;
  symbol_1 : text;
  pool_id : nat32;
  symbol : text;
  lp_fee_bps : nat8;
};
type Approve = record {
  fee : opt nat;
  from : Account;
  memo : opt blob;
  created_at_time : opt nat64;
  amount : nat;
  expected_allowance : opt nat;
  expires_at : opt nat64;
  spender : Account;
};
type Burn = record {
  from : Account;
  memo : opt blob;
  created_at_time : opt nat64;
  amount : nat;
  spender : opt Account;
};
type GetTransactions = record {
  balance : nat;
  transactions : vec TransactionWithId;
  oldest_tx_id : opt nat;
};
type Mint = record {
  to : Account;
  memo : opt blob;
  created_at_time : opt nat64;
  amount : nat;
};
type Result = variant { Ok : AddPoolReply; Err : text };
type Result_1 = variant { Ok : StableToken; Err : text };
type Result_2 = variant { Ok : nat; Err : text };
type Result_3 = variant { Ok : text; Err : text };
type Result_4 = variant { Ok : GetTransactions; Err : text };
type Result_5 = variant { Ok : StablePool; Err : text };
type Result_6 = variant { Ok : float64; Err : text };
type Result_7 = variant { Ok : TransactionResponse; Err : text };
type Result_8 = variant { Ok; Err : text };
type StablePool = record {
  mercx_fee_0 : nat;
  mercx_fee_1 : nat;
  lp_fee_0 : nat;
  lp_fee_1 : nat;
  balance_0 : nat;
  balance_1 : nat;
  kong_fee_bps : nat8;
  pool_id : nat32;
  token_id_0 : nat32;
  token_id_1 : nat32;
  lp_token_id : nat32;
  lp_fee_bps : nat8;
};
type StableToken = record {
  fee : nat;
  decimals : nat8;
  token_id : nat32;
  name : text;
  canister_id : principal;
  icrc1 : bool;
  icrc2 : bool;
  icrc3 : bool;
  symbol : text;
};
type Transaction = record {
  burn : opt Burn;
  kind : text;
  mint : opt Mint;
  approve : opt Approve;
  timestamp : nat64;
  transfer : opt Transfer;
};
type TransactionResponse = record {
  first_index : nat;
  log_length : nat;
  transactions : vec Transaction;
};
type TransactionWithId = record { id : nat; transaction : Transaction };
type Transfer = record {
  to : Account;
  fee : opt nat;
  from : Account;
  memo : opt blob;
  created_at_time : opt nat64;
  amount : nat;
  spender : opt Account;
};
type TransferArgs = record { to_account : Account; amount : nat };
type TxId = variant { TransactionHash : text; BlockIndex : nat };
service : {
  add_pool : (AddPoolArgs) -> (Result);
  add_to_whitelist : (principal) -> ();
  add_token : (principal) -> (Result_1);
  calculate_fees : (nat, nat8, nat8) -> (nat, nat, nat);
  check_balance : (Account, principal) -> (Result_2);
  check_balance_icp : (Account) -> (nat);
  check_balance_mercx : (Account) -> (nat);
  delete_pool : (nat32) -> (Result_3);
  delete_token_by_canister_id : (principal) -> (Result_3);
  deposit_icp_in_canister : (nat64) -> (Result_2);
  deposit_token : (nat64, principal) -> (Result_2);
  get_account_transactions : (Account, opt nat, nat) -> (Result_4);
  get_all_pools : () -> (vec AddPoolReply) query;
  get_all_tokens : () -> (vec StableToken) query;
  get_by_tokens : (text, text) -> (Result_5);
  get_icp_rate : () -> (Result_6);
  get_logo_url : (principal) -> (text);
  get_name : (principal) -> (Result_3) query;
  get_transactions : (nat, nat) -> (Result_7);
  get_whitelisted_principals : () -> (vec text) query;
  is_whitelisted : (principal) -> (bool) query;
  pool_exists : (text, text) -> (bool) query;
  remove_from_whitelist : (principal) -> ();
  reset_tokens : () -> (Result_3);
  sell : (nat64, principal, nat64, principal) -> (Result_3);
  send_mercx : (nat64) -> (Result_2);
  send_token : (nat64, principal) -> (Result_2);
  swap : (nat64, nat64) -> (Result_3);
  swap_example : (nat) -> (text);
  transfer : (TransferArgs) -> (Result_2);
  transfer_from : (TransferArgs) -> (Result_2);
  transfer_from_general : (TransferArgs) -> (Result_2);
  verify_transfer : (StableToken, nat, nat) -> (Result_8);
  whoami : () -> (principal) query;
}
